---
let listItems = [
	{ title: 'Blog', href: '/blog' },
	{ title: 'Projects', href: '/projects' },
	{ title: 'About', href: '/about' },
	{ title: 'Contact', href: '/contact' }
]
---

<header
	class="fixed top-0 z-10 flex h-[--header-height] w-full justify-center bg-white duration-duration [font-size:--font-size]"
>
	<!--headerContainer-->
	<div
		class="mx-[18px] flex h-[--header-height] w-full max-w-[--content-width] items-center justify-end duration-duration"
	>
		<!--logo-->
		<a class="rounded-full no-underline" href="/">
			<div
				class="flex h-[5.5em] w-[5.5em] items-center justify-center rounded-full border-4 border-solid border-dark-red bg-white text-light-red duration-duration [font-size:--font-size] focus-within:border-white focus-within:text-white focus-within:outline-none focus-within:duration-0 focus-within:[background:var(--red-gradient)] hover:border-white hover:text-white hover:outline-none hover:duration-0 hover:[background:--red-gradient]"
			>
				<div class="text-inherit text-[calc(30em/16)] font-medium">RN</div>
			</div>
		</a>
		<nav class="headerNav w-full md:hidden">
			<ul
				class="m-0 -mr-px flex items-center justify-end p-0 md:absolute md:left-0 md:top-[--header-height] md:m-auto md:w-screen md:flex-col md:duration-duration"
			>
				{
					listItems.map((item) => {
						return (
							<li class="list-none px-2 md:m-0">
								<a
									class="list-none rounded-[--border-radius] from-dark-red to-light-red px-4 py-2 text-[1.1rem] font-bold text-dark-grey hover:bg-light-red hover:text-white hover:outline-none focus:bg-light-red focus:text-white focus:outline-none md:m-0 md:block md:w-screen md:rounded-none md:bg-gradient-to-r md:px-0 md:py-[5px] md:text-center md:text-white md:hover:scale-110 md:hover:rounded-none md:hover:to-dark-red md:hover:outline-none md:hover:transition-transform md:hover:duration-duration"
									href={item.href}
								>
									{item.title}
								</a>
							</li>
						)
					})
				}
			</ul>
		</nav>
		<!--mobile nav toggle-->
		<button
			type="button"
			class="headerNavToggle hamburger group flex hidden h-[5.5em] w-[5.5em] shrink-0 cursor-pointer flex-col items-center justify-center self-center justify-self-center rounded-full border-4 border-solid border-dark-red bg-white duration-duration [font-size:--font-size] hover:border-white hover:bg-gradient-to-r hover:from-dark-red hover:to-light-red hover:duration-0 md:ml-auto md:flex"
		>
			<div
				class="wrapper flex h-full w-full flex-col items-center justify-center border-light-red hover:border-white hover:duration-0"
			>
				<div
					class="mx-0 my-[0.25em] h-0 w-[2.8em] shrink-0 grow-0 rounded-[border-radius] border-2 border-solid border-light-red duration-[0.4s] ease-out [font-size:--font-size] [border-color:inherit] group-[.toggled]:relative group-[.toggled]:top-1 group-[.toggled]:m-0 group-[.toggled]:rotate-45"
				>
				</div>
				<div
					class="mx-0 my-[0.25em] h-0 w-[2.8em] shrink-0 grow-0 rounded-[border-radius] border-2 border-solid border-light-red duration-[0.4s] ease-out [font-size:--font-size] [border-color:inherit] group-[.toggled]:m-0 group-[.toggled]:rotate-[405deg] group-[.toggled]:opacity-0"
				>
				</div>
				<div
					class="mx-0 my-[0.25em] h-0 w-[2.8em] shrink-0 grow-0 rounded-[border-radius] border-2 border-solid border-light-red duration-[0.4s] ease-out [font-size:--font-size] [border-color:inherit] group-[.toggled]:relative group-[.toggled]:bottom-1 group-[.toggled]:m-0 group-[.toggled]:-rotate-45"
				>
				</div>
			</div>
		</button>
	</div>
</header>
<div
	class="header-trigger h-[calc(120rem/16)] duration-[--transition-speed] md:h-[calc(100rem/16)]"
>
</div>
<style>
	:root {
		--header-height: calc(120rem / 16);
		--transition-speed: 0.2s;
		--font-size: 1rem;
	}
	@media (max-width: calc(639rem / 16)) {
		:root {
			--font-size: 0.85rem;
			--header-height: calc(100rem / 16);
		}
	}
</style>
<script>
	const html = document.documentElement
	const headerTrigger = document.querySelector('.header-trigger')
	const headerHeightInit = html.style.getPropertyValue('--header-height')
	const fontSizeInit = html.style.getPropertyValue('--font-size')
	let options = {
		root: null,
		rootMargin: '-10px',
		threshold: 0
	}
	const obsCallback = (entries) => {
		entries.forEach((entry) => {
			if (!entry.isIntersecting) {
				html.style.setProperty('--header-height', '4.75rem')
				html.style.setProperty('--font-size', '0.7rem')
			} else {
				html.style.setProperty('--header-height', headerHeightInit)
				html.style.setProperty('--font-size', fontSizeInit)
			}
		})
	}

	let headerObserver = new IntersectionObserver(obsCallback, options)
	headerObserver.observe(headerTrigger)
</script>
<script>
	const headerNavToggle = document.querySelector('.headerNavToggle')
	const headerNav = document.querySelector('.headerNav')
	headerNavToggle.addEventListener('click', () => {
		headerNav.classList.toggle('md:hidden')
		headerNavToggle.classList.toggle('toggled')
	})
</script>
