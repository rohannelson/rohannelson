---
import { Icon } from 'astro-icon/components'
import { fetchColours, fetchPlayerColours, capitalise } from './utils'
const email = Astro?.locals?.email ?? ''
const colours = await fetchColours()
const [playerColours] = Astro?.locals?.colours ?? [{player_1_colour: null, player_2_colour: null}]
let p1c = "red";
let p2c = "green";
colours.forEach(colour => {
	if (colour.id==playerColours?.player_1_colour) {
		p1c = colour.name
	}
	if (colour.id==playerColours?.player_2_colour) {
		p2c = colour.name
	}
})
console.log(playerColours)
console.log(Astro?.locals)
---

<!--User Menu Button-->{
	email && email != 'Guest' && (
		<button
			type="button"
			title={`Signed in as ${email}`}
			class="user-button group flex h-14 w-14 items-center rounded-full border-[3px] border-solid border-dark-red hover:border-white hover:bg-gradient-to-r hover:from-dark-red hover:to-light-red"
		>
			<Icon name="user" class="mx-auto mb-1 h-8 w-8 text-light-red group-hover:text-white" />
		</button>
	)
}
<!--User Menu-->
<ul
	class="user-menu absolute right-0 top-[--header-height] flex hidden w-40 flex-col rounded-l-[--border-radius] border-2
	border-r-0 border-solid border-white bg-gradient-to-r from-light-red to-dark-red py-3"
>
	<li
		class="w-full border-l-2 border-solid border-l-light-red text-center font-medium text-white hover:bg-white hover:text-light-red"
	>
	<button type="button" title="Colour selection menu" class="colour-menu-button w-full h-full py-2">
		Player Colours
	</button>
	</li>
	<li
		class="w-full border-l-2 border-solid border-l-light-red py-2 text-center font-medium text-white hover:bg-white hover:text-light-red"
	>
		Statistics
	</li>
	<li
		class="group w-full border-l-2 border-solid border-l-light-red py-2 text-center hover:bg-white"
	>
		<a
			href="/api/auth/sign-out"
			class="block h-full w-full font-medium text-white group-hover:text-light-red">Sign Out</a
		>
	</li>
</ul>
<!--Colour Selection Menu-->
	{email && email != 'Guest' && (<div
	class="user-menu colour-menu hidden absolute right-40 top-[--header-height] rounded-[--border-radius] border-2 border-solid border-light-grey p-4 shadow-lg bg-white"
>
	<form class="space-y-4 flex flex-col" action="/api/player-colours" method="post">
		{["1", "2"].map((player) => {
			let playerColour = (player == "1") ? p1c : p2c
		return (<label for={`player-${player}-colours`}>Player {player}</label>
		<select name={`player-${player}-colours`} id={`player-${player}-colours`}>
			{
				colours.map((colour) => {
					let selected = colour.name == playerColour ? "selected" : false
					return <option value={`{"name":"${colour.name}", "id":"${colour.id}"}`} {selected}>{capitalise(colour.name)}</option>
				})
			}
		</select>
		<div class="flex gap-2">
			<div class={`player-${player}-preview-light bg-light-${playerColour} h-8 w-8`}></div>
			<div class={`player-${player}-preview-dark bg-dark-${playerColour} h-8 w-8`}></div>
		</div>)
		})}
		<button type="submit" class="">Save</button>
	</form>
</div>)}

<script>
	//Note that this interacts with HeaderNav and HeaderNavToggle from the Header component (and is interacted with by them)
	//Toggle User Menu
	const userButton = document.querySelectorAll('.user-button')
	const userMenu = document.querySelectorAll('.user-menu') 
	const headerNav = document.querySelector('.headerNav')
	const headerNavToggle = document.querySelector('.headerNavToggle')
	const colourMenu = document.querySelectorAll(".colour-menu")
	const colourMenuButton = document.querySelectorAll(".colour-menu-button")
	userButton.forEach((button) => {
		button.addEventListener('click', () => {
			console.log('click')
			userMenu.forEach((menu) => {
				menu.classList.toggle('hidden')
			})
			headerNav.classList.add('md:hidden')
			headerNavToggle.classList.remove('toggled')
			colourMenu.forEach(menu => menu.classList.add('hidden'))
		})
	})
	//Colour Menu
	colourMenuButton.forEach(button => {
		button.addEventListener("click", () => {
			colourMenu.forEach(menu => {
				menu.classList.toggle("hidden")
			})
		})
	})
	const playerOneSelects = document.querySelectorAll("#player-1-colours")
	const playerTwoSelects = document.querySelectorAll("#player-2-colours")
	const playerOnePreviews = {light: document.querySelectorAll(`.player-1-preview-light`), dark: document.querySelectorAll(`.player-1-preview-dark`)}
	const playerTwoPreviews = {light: document.querySelectorAll(`.player-2-preview-light`), dark: document.querySelectorAll(`.player-2-preview-dark`)}
	const dynamicSelects = (selects, previews) => {
		selects.forEach((select) => {
			const regex = /(bg-(light|dark)-)[a-z]+/;
			select.addEventListener('change', (e) => {
			selects.forEach(select => {select.value = e.currentTarget.value})
			previews.light.forEach(preview => {
				preview.className = preview.className.replace(regex, `bg-light-${JSON.parse(e.currentTarget.value).name}`)
			})
			previews.dark.forEach(preview => {
				preview.className = preview.className.replace(regex, `bg-dark-${JSON.parse(e.currentTarget.value).name}`)
			})
	})
	})}
	dynamicSelects(playerOneSelects, playerOnePreviews)
	dynamicSelects(playerTwoSelects, playerTwoPreviews)
</script>
